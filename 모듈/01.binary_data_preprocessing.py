# -*- coding: utf-8 -*-
"""01.binary_data_preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_CGOa899Qu-9_mpigFoXdOQ_kxjMesxc
"""
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

def corr_heatmap(df, label_column):
    

    # 상관관계 분석
    df_corr = df.corr(method='pearson')
    
    # 상관관계 시각화
    fig, ax = plt.subplots(figsize=(50, 50))
    ax = sns.heatmap(df_corr, 
                    linewidths = 0.1, vmax=1.0,
                   square=True, cmap=plt.cm.PuBu,
                   linecolor='white', annot=True, annot_kws={'size':20})
    ax.tick_params(labelsize=30)
    ax.tick_params(axis='x', rotation=90)
    
    fig.tight_layout()
    plt.show()
    
    
    # 상관관계 순위 DataFrame 만들기
    new_df_corr = df.corr(method='pearson')
    label_column_corr = new_df_corr[label_column]
    label_column_corr_sort = abs(label_column_corr.drop(label_column)).sort_values(ascending=False)
    
    sort_columns = list(label_column_corr_sort.index)
    
    sort_values = []
    for column in sort_columns:
        sort_values.append(label_column_corr[column])
    
    rank = list(range(1, len(sort_columns)+1))
    rank_df = pd.DataFrame({'rank': rank,
                            'columns':sort_columns,
                            'values':sort_values}).set_index('rank')
    
    return rank_df
    
def nan2mean(df, label_name):
    nan_columns = df.isnull().sum()[df.isnull().sum() != 0].index
    for column_name in nan_columns:
        df.loc[df.loc[df[column_name].fillna('nan')=='nan', :].loc[df[label_name]==0, column_name].index, column_name] = df.loc[df[label_name]==0, column_name].mean()
        df.loc[df.loc[df[column_name].fillna('nan')=='nan', :].loc[df[label_name]==1, column_name].index, column_name] = df.loc[df[label_name]==1, column_name].mean()
    return_df = df
    return return_df

# outlier index 추출
def outlier_iqr(data):
    data = data.dropna()
    q1, q3 = np.percentile(data, [25, 75])
    iqr = q3 - q1
    lower_bound = q1 - iqr*1.5
    upper_bound = q3 + iqr*1.5
    return np.where((data < lower_bound) | (data > upper_bound))[0]

# outlier 제거
def not_outlier_index(df):
    outlier_index = np.empty(shape=(0, ))
    for column in df.columns:
        index = outlier_iqr(df[column])
        outlier_index = np.concatenate([outlier_index, index], axis=None)
    outlier_index = np.array(pd.Series(outlier_index).drop_duplicates())
    
    use_index = []
    for idx in df.index:
        if idx not in outlier_index:
            use_index.append(idx)
    
    return use_index

# 값이 하나밖에 없는 컬럼 제거
def remove_one_value_column(df):
    remove_columns = []
    for column in df.columns:
        if len(df[column].unique()) == 1:
            remove_columns.append(column)
    return_df = df.drop(remove_columns, axis=1)
    return return_df
    
        